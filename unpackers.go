package bp

import "encoding/binary"

func unpackergen3(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(10 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 3 - n
		regs[1] >>= 3 - n
		regs[2] >>= 3 - n
		regs[3] >>= 3 - n
	}
	{
		mask := bitsToMask(3)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		pulloverBits(uint8(0x2))
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		pulloverBits(uint8(0x1))
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, regs[len(regs)-4]+(regs[0]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[1]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[2]&mask))
		ret = append(ret, regs[len(regs)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
	}
	return data, ret
}
