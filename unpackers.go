package bp

import "encoding/binary"

func unpackergen1(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(1 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 1 - n
		regs[1] >>= 1 - n
		regs[2] >>= 1 - n
		regs[3] >>= 1 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(1)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 1
		regs[1] >>= 1
		regs[2] >>= 1
		regs[3] >>= 1
	}
	return data, ret
}
func unpackergen2(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(2 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 2 - n
		regs[1] >>= 2 - n
		regs[2] >>= 2 - n
		regs[3] >>= 2 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(2)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 2
		regs[1] >>= 2
		regs[2] >>= 2
		regs[3] >>= 2
	}
	return data, ret
}
func unpackergen3(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(3 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 3 - n
		regs[1] >>= 3 - n
		regs[2] >>= 3 - n
		regs[3] >>= 3 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(3)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 3
		regs[1] >>= 3
		regs[2] >>= 3
		regs[3] >>= 3
	}
	return data, ret
}
func unpackergen4(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(4 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 4 - n
		regs[1] >>= 4 - n
		regs[2] >>= 4 - n
		regs[3] >>= 4 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(4)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 4
		regs[1] >>= 4
		regs[2] >>= 4
		regs[3] >>= 4
	}
	return data, ret
}
func unpackergen5(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(5 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 5 - n
		regs[1] >>= 5 - n
		regs[2] >>= 5 - n
		regs[3] >>= 5 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(5)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 5
		regs[1] >>= 5
		regs[2] >>= 5
		regs[3] >>= 5
	}
	return data, ret
}
func unpackergen6(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(6 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 6 - n
		regs[1] >>= 6 - n
		regs[2] >>= 6 - n
		regs[3] >>= 6 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(6)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 6
		regs[1] >>= 6
		regs[2] >>= 6
		regs[3] >>= 6
	}
	return data, ret
}
func unpackergen7(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(7 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 7 - n
		regs[1] >>= 7 - n
		regs[2] >>= 7 - n
		regs[3] >>= 7 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(7)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 7
		regs[1] >>= 7
		regs[2] >>= 7
		regs[3] >>= 7
	}
	return data, ret
}
func unpackergen8(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(8 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 8 - n
		regs[1] >>= 8 - n
		regs[2] >>= 8 - n
		regs[3] >>= 8 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(8)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 8
		regs[1] >>= 8
		regs[2] >>= 8
		regs[3] >>= 8
	}
	return data, ret
}
func unpackergen9(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(9 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 9 - n
		regs[1] >>= 9 - n
		regs[2] >>= 9 - n
		regs[3] >>= 9 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(9)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 9
		regs[1] >>= 9
		regs[2] >>= 9
		regs[3] >>= 9
	}
	return data, ret
}
func unpackergen10(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(10 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 10 - n
		regs[1] >>= 10 - n
		regs[2] >>= 10 - n
		regs[3] >>= 10 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(10)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 10
		regs[1] >>= 10
		regs[2] >>= 10
		regs[3] >>= 10
	}
	return data, ret
}
func unpackergen11(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(11 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 11 - n
		regs[1] >>= 11 - n
		regs[2] >>= 11 - n
		regs[3] >>= 11 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(11)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 11
		regs[1] >>= 11
		regs[2] >>= 11
		regs[3] >>= 11
	}
	return data, ret
}
func unpackergen12(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(12 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 12 - n
		regs[1] >>= 12 - n
		regs[2] >>= 12 - n
		regs[3] >>= 12 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(12)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 12
		regs[1] >>= 12
		regs[2] >>= 12
		regs[3] >>= 12
	}
	return data, ret
}
func unpackergen13(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(13 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 13 - n
		regs[1] >>= 13 - n
		regs[2] >>= 13 - n
		regs[3] >>= 13 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(13)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0xc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0xb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 13
		regs[1] >>= 13
		regs[2] >>= 13
		regs[3] >>= 13
	}
	return data, ret
}
func unpackergen14(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(14 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 14 - n
		regs[1] >>= 14 - n
		regs[2] >>= 14 - n
		regs[3] >>= 14 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(14)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0xc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0xc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 14
		regs[1] >>= 14
		regs[2] >>= 14
		regs[3] >>= 14
	}
	return data, ret
}
func unpackergen15(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(15 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 15 - n
		regs[1] >>= 15 - n
		regs[2] >>= 15 - n
		regs[3] >>= 15 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(15)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0xc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0xe))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0x9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0xb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		pulloverBits(uint8(0xd))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 15
		regs[1] >>= 15
		regs[2] >>= 15
		regs[3] >>= 15
	}
	return data, ret
}
func unpackergen16(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(16 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 16 - n
		regs[1] >>= 16 - n
		regs[2] >>= 16 - n
		regs[3] >>= 16 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(16)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 16
		regs[1] >>= 16
		regs[2] >>= 16
		regs[3] >>= 16
	}
	return data, ret
}
func unpackergen17(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(17 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 17 - n
		regs[1] >>= 17 - n
		regs[2] >>= 17 - n
		regs[3] >>= 17 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(17)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xf))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xd))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0x9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xff))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xfd))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xfb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xf9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xf7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xf5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xf3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 17
		regs[1] >>= 17
		regs[2] >>= 17
		regs[3] >>= 17
		pulloverBits(uint8(0xf1))
	}
	return data, ret
}
func unpackergen18(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(18 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 18 - n
		regs[1] >>= 18 - n
		regs[2] >>= 18 - n
		regs[3] >>= 18 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(18)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xe))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xfe))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xfa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xf6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xf2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xee))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xea))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xe6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xe2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xde))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xda))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xd6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 18
		regs[1] >>= 18
		regs[2] >>= 18
		regs[3] >>= 18
		pulloverBits(uint8(0xd2))
	}
	return data, ret
}
func unpackergen19(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(19 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 19 - n
		regs[1] >>= 19 - n
		regs[2] >>= 19 - n
		regs[3] >>= 19 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(19)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xd))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xfb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xf5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xef))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xe9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xe3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xdd))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xd7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xd1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xcb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xc5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xbf))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xb9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 19
		regs[1] >>= 19
		regs[2] >>= 19
		regs[3] >>= 19
		pulloverBits(uint8(0xb3))
	}
	return data, ret
}
func unpackergen20(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(20 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 20 - n
		regs[1] >>= 20 - n
		regs[2] >>= 20 - n
		regs[3] >>= 20 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(20)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xfc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xf4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xec))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xe4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xdc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xd4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xcc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xc4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xbc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xb4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xac))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0xa4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0x9c))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 20
		regs[1] >>= 20
		regs[2] >>= 20
		regs[3] >>= 20
		pulloverBits(uint8(0x94))
	}
	return data, ret
}
func unpackergen21(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(21 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 21 - n
		regs[1] >>= 21 - n
		regs[2] >>= 21 - n
		regs[3] >>= 21 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(21)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xf7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xed))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xe3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xd9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xcf))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xc5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xbb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xb1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0xa7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0x9d))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0x93))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0x89))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0x7f))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 21
		regs[1] >>= 21
		regs[2] >>= 21
		regs[3] >>= 21
		pulloverBits(uint8(0x75))
	}
	return data, ret
}
func unpackergen22(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(22 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 22 - n
		regs[1] >>= 22 - n
		regs[2] >>= 22 - n
		regs[3] >>= 22 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(22)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xfe))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xf2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xe6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xda))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xce))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xc2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xb6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0xaa))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x9e))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x92))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x86))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x7a))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x6e))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x62))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 22
		regs[1] >>= 22
		regs[2] >>= 22
		regs[3] >>= 22
		pulloverBits(uint8(0x56))
	}
	return data, ret
}
func unpackergen23(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(23 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 23 - n
		regs[1] >>= 23 - n
		regs[2] >>= 23 - n
		regs[3] >>= 23 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(23)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xfb))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xed))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xdf))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xd1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xc3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xb5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0xa7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x99))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x8b))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x7d))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x6f))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x61))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x53))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		pulloverBits(uint8(0x45))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 23
		regs[1] >>= 23
		regs[2] >>= 23
		regs[3] >>= 23
	}
	return data, ret
}
func unpackergen24(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(24 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 24 - n
		regs[1] >>= 24 - n
		regs[2] >>= 24 - n
		regs[3] >>= 24 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(24)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xf8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xe8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xd8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xc8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xb8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xa8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x98))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x88))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x78))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x68))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x58))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x48))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0x8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 24
		regs[1] >>= 24
		regs[2] >>= 24
		regs[3] >>= 24
		pulloverBits(uint8(0xf8))
	}
	return data, ret
}
func unpackergen25(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(25 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 25 - n
		regs[1] >>= 25 - n
		regs[2] >>= 25 - n
		regs[3] >>= 25 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(25)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0xf5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0xe3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0xd1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0xbf))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0xad))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x9b))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x89))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x77))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x65))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x53))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x41))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x16))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
		pulloverBits(uint8(0xf2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 25
		regs[1] >>= 25
		regs[2] >>= 25
		regs[3] >>= 25
	}
	return data, ret
}
func unpackergen26(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(26 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 26 - n
		regs[1] >>= 26 - n
		regs[2] >>= 26 - n
		regs[3] >>= 26 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(26)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xf2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xde))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xca))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xb6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xa2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x8e))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x7a))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x66))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x52))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x3e))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0x10))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xfc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xe8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
		pulloverBits(uint8(0xd4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 26
		regs[1] >>= 26
		regs[2] >>= 26
		regs[3] >>= 26
	}
	return data, ret
}
func unpackergen27(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(27 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 27 - n
		regs[1] >>= 27 - n
		regs[2] >>= 27 - n
		regs[3] >>= 27 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(27)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0x5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xef))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xd9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xc3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xad))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0x97))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0x81))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0x6b))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0x55))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0x3f))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xe))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xf8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xe2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xcc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
		pulloverBits(uint8(0xb6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 27
		regs[1] >>= 27
		regs[2] >>= 27
		regs[3] >>= 27
	}
	return data, ret
}
func unpackergen28(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(28 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 28 - n
		regs[1] >>= 28 - n
		regs[2] >>= 28 - n
		regs[3] >>= 28 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(28)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xec))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xd4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xbc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xa4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x8c))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x74))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x5c))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x44))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x10))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xf8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xe0))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xc8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0xb0))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
		pulloverBits(uint8(0x98))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 28
		regs[1] >>= 28
		regs[2] >>= 28
		regs[3] >>= 28
	}
	return data, ret
}
func unpackergen29(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(29 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 29 - n
		regs[1] >>= 29 - n
		regs[2] >>= 29 - n
		regs[3] >>= 29 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(29)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xe9))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xcf))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xb5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x9b))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x81))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x67))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x4d))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x16))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xfc))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xe2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xc8))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0xae))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x94))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
		pulloverBits(uint8(0x7a))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 29
		regs[1] >>= 29
		regs[2] >>= 29
		regs[3] >>= 29
	}
	return data, ret
}
func unpackergen30(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(30 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 30 - n
		regs[1] >>= 30 - n
		regs[2] >>= 30 - n
		regs[3] >>= 30 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(30)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0xe6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0xca))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0xae))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x92))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x76))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x5a))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0xe6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0xca))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0xae))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x92))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x76))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		pulloverBits(uint8(0x5a))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 30
		regs[1] >>= 30
		regs[2] >>= 30
		regs[3] >>= 30
	}
	return data, ret
}
func unpackergen31(data []byte) ([]byte, []uint32) {
	regs := [4]uint32{}
	ret := []uint32{}
	pulloverBits := func(n uint8) {
		remainderMask := bitsToMask(n)
		leftoverMask := bitsToMask(31 - n)
		remainder := [4]uint32{regs[0], regs[1], regs[2], regs[3]}
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		fromPrevious := (remainder[0] & remainderMask)
		cur := ((regs[0] & leftoverMask) << n)
		ret = append(ret, ret[len(ret)-4]+(cur|fromPrevious))
		ret = append(ret, ret[len(ret)-4]+(((regs[1]&leftoverMask)<<n)|(remainder[1]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[2]&leftoverMask)<<n)|(remainder[2]&remainderMask)))
		ret = append(ret, ret[len(ret)-4]+(((regs[3]&leftoverMask)<<n)|(remainder[3]&remainderMask)))
		regs[0] >>= 31 - n
		regs[1] >>= 31 - n
		regs[2] >>= 31 - n
		regs[3] >>= 31 - n
	}
	_ = pulloverBits
	{
		mask := bitsToMask(31)
		regs[0] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[1] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[2] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		regs[3] = (binary.LittleEndian.Uint32(data[0:4]))
		data = data[4:]
		ret = append(ret, (regs[0] & mask))
		ret = append(ret, (regs[1] & mask))
		ret = append(ret, (regs[2] & mask))
		ret = append(ret, (regs[3] & mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x1))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0xe3))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0xc5))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0xa7))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x89))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x6b))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x4d))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x10))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0xf2))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0xd4))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0xb6))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x98))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x7a))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		pulloverBits(uint8(0x5c))
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
		ret = append(ret, ret[len(ret)-4]+(regs[0]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[1]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[2]&mask))
		ret = append(ret, ret[len(ret)-4]+(regs[3]&mask))
		regs[0] >>= 31
		regs[1] >>= 31
		regs[2] >>= 31
		regs[3] >>= 31
	}
	return data, ret
}
